/* !!! RUN AS OWNER USER  */ 

-- psql 
-- create database changeset owner test;
-- psql -U test -d changeset
/*  DDL for changeset database */

CREATE TABLE pending_changesets (id bigint, created_at text) ;
CREATE TABLE changesets (id bigint, bot int, created_at timestamp, closed_at timestamp, username text, closed_at_day text, uid text, created_by text, minlat float, minlon float, maxlat float, maxlon float, changes_count int, PRIMARY KEY(id));
CREATE TABLE countries(id int, parentid int, name text, fullname text, downloadname text, clat float, clon float,  map int, PRIMARY KEY(id));
CREATE TABLE changeset_country(changesetid bigint, countryid int, small int);

CREATE TABLE supporters(userid bigint not null, token text, visiblename text, useremail text, preferred_region text, os text, orderid text);
CREATE SEQUENCE supporters_seq START 1000;
ALTER TABLE supporters ADD PRIMARY KEY (userid);

--- Main primary key orderid + sku (alternative purchasetoken + sku  but there could be multiple orderid for same purchaseToken)
CREATE TABLE supporters_device_sub(sku text, purchasetoken text, prevvalidpurchasetoken text, timestamp timestamp,
        autorenewing boolean, starttime timestamp, expiretime timestamp, kind text, payload text, orderid text,
        price int, pricecurrency text, introprice int, intropricecurrency text, introcycles int, introcyclename text,
        paymentstate int, valid boolean, checktime timestamp);
CREATE INDEX supporters_device_sub_starttime_idx on supporters_device_sub(starttime);
CREATE INDEX supporters_device_sub_expiretime_idx on supporters_device_sub(expiretime);
CREATE INDEX supporters_device_sub_orderid_idx on supporters_device_sub(orderid);
ALTER TABLE supporters_device_sub add primary key (sku, orderid);

------ PREMIUM accounts ----
CREATE TABLE user_accounts(id serial primary key, email text not null, tokendevice text, orderid text, token text, tokentime timestamp, regtime timestamp); 
CREATE TABLE user_account_devices(id serial primary key, userid integer, deviceid text, accesstoken text, udpatetime timestamp); 
CREATE TABLE user_files(id bigserial primary key, type text, name text, userid integer, deviceid integer, updatetime timestamp, clienttime timestamp, filesize bigint, zipfilesize bigint, storage text, gendetails jsonb, data bytea);
CREATE TABLE promo_campaigns(name text, starttime timestamp, endtime timestamp, subactivemonths integer, numberlimit integer, used integer, lastusers text);
ALTER TABLE user_accounts ADD CONSTRAINT email_uniq UNIQUE (email);
--- 
--- alter table user_files add column storage text;
--- alter table user_files alter column filesize type bigint;
--- alter table user_files add column zipfilesize bigint;
--- update user_files set zipfilesize = length(data);
CREATE INDEX user_account_devices_userid_idx on user_account_devices(userid);
CREATE INDEX user_files_userid_idx on user_files(userid);
CREATE INDEX user_files_deviceid_idx on user_files(deviceid);

-- mail group
CREATE TABLE email_free_users(aid text, email text, os text, updatetime timestamp);
CREATE TABLE email_blocked(email text, reason text, timestamp timestamp);
CREATE TABLE email_unsubscribed(email text, channel text, timestamp timestamp);
CREATE TABLE email_support_survey(ip text, response text, timestamp timestamp);

CREATE TABLE data_missing_search(ip text, search text, location text, timestamp timestamp);

CREATE TABLE osm_recipients(osmid text, email text, btcaddr text, updatetime timestamp);

CREATE TABLE exchange_rates(currency text, month date, eurrate double precision	);

CREATE INDEX changesets_id_idx on changesets(id);
CREATE INDEX changesets_closed_at_day_idx on changesets(closed_at_day);
CREATE INDEX changesets_username_idx on changesets(username);
CREATE INDEX changesets_country_country_idx on changeset_country(countryid);
CREATE INDEX changesets_country_changeset_idx on changeset_country(changesetid);

CREATE TABLE final_reports (name text, month text, region text, report text, time int);
CREATE INDEX final_reports_grp_idx on final_reports(name,month,region);

--  CURRENT MONTH MATERIALIZED VIEW
CREATE MATERIALIZED VIEW changesets_view AS SELECT * FROM changesets where 
closed_at > ( (SELECT max(closed_at) FROM changesets)::date - '60 day'::interval) WITH DATA;
CREATE MATERIALIZED VIEW changeset_country_view AS SELECT * FROM changeset_country c where exists (select 1 from changesets_view d where d.id = c.changesetid) WITH DATA;
--  REFRESH MATERIALIZED VIEW  changesets_view ;
--  REFRESH MATERIALIZED VIEW  changeset_country_view ;

--  TELEGRAM SERVER MONITORING 
CREATE TABLE telegram_monitoring (
  id bigint NOT NULL, first_name varchar(100)  DEFAULT NULL, last_name varchar(100)  DEFAULT NULL, user_id bigint DEFAULT NULL, data jsonb, PRIMARY KEY (id)
);

--  TELEGRAM TRACKER CONFIGURATION 
CREATE TABLE telegram_devices (id bigint NOT NULL, chat_id bigint NOT NULL, created_date timestamp NOT NULL,
    modified_date timestamp, device_name character varying(200)  NOT NULL, user_id bigint NOT NULL, data jsonb, PRIMARY KEY (id)
);
CREATE INDEX telegram_devices_idx on telegram_devices(user_id);

CREATE TABLE lottery_users (email text, series text, hashcode text, ip text,
        promocode text, round integer, sent boolean, updatetime timestamp);
CREATE INDEX lottery_users_series_idx on lottery_users(series);

CREATE TABLE lottery_rounds( series text, participants text, seed text,
        winner text, size integer, selection integer, round_id integer, updatetime timestamp);
CREATE INDEX lottery_rounds_series_idx on lottery_rounds(series);

CREATE TABLE lottery_series(name text, type text, promocodes text, usedpromos text, rounds integer, status text, emailtemplate text, updatetime timestamp);

CREATE TABLE poll_results (ip text, date timestamp, pollid text, answer integer);

--  ANALYTICS 
CREATE TABLE analytics (
    ip text, date timestamp, aid text, nd integer, ns integer, version text,
    lang text, start_date timestamp, finish_date timestamp, data bytea
);

-- SPECIFY USER -- -- -- -- -- -- -- -- -- -- -- -- 
-- \set DBUSER test;
-- GRANT ALL privileges ON ALL TABLES IN SCHEMA public to :DBUSER;
-- GRANT ALL privileges ON supporters_seq to  <user>;
-- ALTER TABLE <table_name> OWNER TO <user>;