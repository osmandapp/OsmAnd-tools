buildscript {

	repositories {
		mavenCentral()
		jcenter()
	}
}

plugins {
		id "de.undercouch.download" version "4.1.1"
}


subprojects {

	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'idea'

	configurations {
		jvmPublicConfig { 
			extendsFrom(runtimeClasspath)
		}
	}

	group 'net.osmand'
	version 'master-snapshot'
	sourceCompatibility = 17
	targetCompatibility = "17"
	
	eclipse {
			classpath {
				file {
					whenMerged {
						entries.findAll { it.kind == 'lib' }.each { it.entryAttributes['module'] = 'false' }
					}
			}
		}
	}

	repositories {
		maven {
			url "https://maven.geotoolkit.org"
		}
		maven {
			url "https://maven.geo-solutions.it/"
		}
		mavenCentral()
		jcenter()
		google()
	}

	test {
			ignoreFailures = true

		reports {
			junitXml {
			   enabled
			}
			html {
			  ! enabled 
			}
		}
		systemProperty 'eyepiece', System.getProperty('eyepiece')
		systemProperty 'openglTestResources', System.getProperty('openglTestResources')
	}

	// HELPER TASKS
	task fatJar(type: Jar) {
		manifest.from jar.manifest
		dependsOn configurations.runtimeClasspath
		duplicatesStrategy  DuplicatesStrategy.EXCLUDE
		if (project.hasProperty('mainClassAttribute')) {
			manifest.attributes 'Main-Class': project.getProperty('mainClassAttribute');
		}
		archiveFileName = "${project.name}.jar"
		from {
			configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
		} 
		{
			exclude "META-INF/*.SF"
			exclude "META-INF/*.DSA"
			exclude "META-INF/*.RSA"
		}
		with jar
	}


	task printRuntimeClasspath {
		  doFirst {
			println(configurations.runtimeClasspath.collect { 'lib/'+it.getName() }.join('\n'))
		  }
	}
	
	task listConfigurations {
		doLast {
			configurations.each { config ->
				println "Configuration: ${config.name}"
				println " - Transitive: ${config.transitive}"
				println " - Visible: ${config.visible}"
				println " - Can be resolved: ${config.canBeResolved}"
				println " - Can be consumed: ${config.canBeConsumed}"
				println " - Extends from: ${config.extendsFrom.collect { it.toString() }}"
				println " - Dependencies: ${config.dependencies.collect { it.toString() }}"
				println()
			}
		}
	}

}
